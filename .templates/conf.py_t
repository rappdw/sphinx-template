# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
{% if append_syspath -%}
import os
import sys
sys.path.insert(0, {{ module_path | repr }})
{% else -%}
# import os
# import sys
{% if module_path -%}
# sys.path.insert(0, {{ module_path | repr }})
{% else -%}
# sys.path.insert(0, os.path.abspath('.'))
{% endif -%}
{% endif %}

# -- Code to retrieve password from keychain ---------------------------------
import os


def getpassword(service):
    cmd = ' '.join([
        "/usr/bin/security",
        " find-generic-password",
        f"-w -s {service}"
    ])
    p = os.popen(cmd)
    s = p.read().strip()
    p.close()
    return s

# -- Project information -----------------------------------------------------

project = {{ project | repr }}
copyright = {{ copyright | repr }}
author = {{ author | repr }}

{%- if version %}

# The short X.Y version
version = {{ version | repr }}
{%- endif %}
{%- if release %}

# The full version, including alpha/beta/rc tags
release = {{ release | repr }}
{%- endif %}


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
{%- for ext in extensions %}
    '{{ ext }}',
{%- endfor %}
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['{{ dot }}templates']

{% if suffix != '.rst' -%}
# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = {{ suffix | repr }}

{% endif -%}
{% if root_doc != 'index' -%}
# The root document.
root_doc = {{ root_doc | repr }}

{% endif -%}
{% if language -%}
# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = {{ language | repr }}

{% endif -%}
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [{{ exclude_patterns }}]


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['{{ dot }}static']
{%- if extensions %}


# -- Extension configuration -------------------------------------------------
{%- endif %}
{%- if 'sphinx.ext.intersphinx' in extensions %}

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
}
{%- endif %}
{%- if 'sphinx.ext.todo' in extensions %}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
{%- endif %}

# -- Options for MyST extension ------------------------------------------------------------
myst_enable_extensions = [
    "amsmath",
    "colon_fence",
    "deflist",
    "dollarmath",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "substitution",
    "tasklist",
]

myst_heading_anchors = 2

# -- Options for confluence builder extension ----------------------------------------------
confluence_publish = False
confluence_space_name = '{{ confulence_space }}'
confluence_parent_page = '{{ confluence_parent }}'
confluence_server_url = '{{ confluence_url }}'
confluence_server_user = os.getlogin()
confluence_server_pass = getpassword('{{ confluence_keychain_service }}')
confluence_page_hierarchy = True
confluence_add_secnumbers = True
confluence_prev_next_buttons_location = 'both'

# -- Options for drawio extension ------------------------------------------------------------
drawio_binary_path = '/Applications/draw.io.app/Contents/MacOS/draw.io'

# -- Options for rinoh extension ------------------------------------------------------------
rinoh_documents = [
    dict(doc='index', target='{{ project }}', toctree_only=False),
]

#### Following code required until [PR #300](https://github.com/brechtm/rinohtype/pull/300) is merged ####
import rinoh as rt

from sphinx.ext.graphviz import render_dot
from rinoh.frontend.rst.nodes import Image


class Graphviz(Image):
    def __init__(self, doctree_node, **context):
        super().__init__(doctree_node, **context)
        self.code = doctree_node.attributes['code']
        self.gv_options = doctree_node.attributes['options']

    def build_flowable(self):
        sphinx_app = self.context['sphinx_builder'].app
        fname, outfn = render_dot(sphinx_app, self.code, self.gv_options, sphinx_app.config.graphviz_output_format)
        return rt.Image(outfn, **self.options)
